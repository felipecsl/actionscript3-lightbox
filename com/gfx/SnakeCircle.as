/*com.gfx.SnakeCircle aka 'Oh that loader'.Created by Erik Hallander; www.erikhallander.com/blog :: erikhallander@gmail.comInspired by an AS2 sketch by Krilnon @ reclipse.netUpdated to bitmapdata from a suggestion from Ryan Ragona*****Lies under the 'I don't care what you do with this' licence. If you end up using itthough, it'd be cool if you left these credits intact ;)****/package com.gfx {		import flash.display.Sprite;	import flash.display.Graphics;	import flash.events.Event;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Rectangle;		public class SnakeCircle extends Sprite {			private var _numCircles:int = 140;		private var _running:Boolean = false;		private var _sprites:Array = [];		private var _speed:Number;		private var _direction:String = "";		private var _setUp:Boolean = true;		private var holder:Sprite = new Sprite();		private var _bmd:BitmapData;		private var _bmp:Bitmap;		private var _mainHolder:Sprite = new Sprite();				/* Constructor		* @params		* - Outer radius (int), Inner radius (int), FillColor (uint)		* @optional params		* - speed: Number		*/				public function SnakeCircle(_radius:int, _circleSize:int, fillColor:uint, speed:Number, dir:String = "CLOCKWISE"):void {			this.visible = false;			_speed = speed;			_direction = dir;			var _radians = (360/_numCircles)*Math.PI/180;			addChild(_mainHolder);			setupSnake(_radius, _radians, _circleSize, fillColor);		};				public function start():void {			if (_running) throw new Error("SnakeCircle already started!");			else {				this.visible = true;				addEventListener(Event.ENTER_FRAME, updateSnake);				_running = true;			};		};				public function stop():void {			if (!_running) throw new Error("SnakeCircle already stopped!");			else {				this.visible = false;				removeEventListener(Event.ENTER_FRAME, updateSnake);				_running = false;			};		};				public function modifySnake(_radius:int, _circleSize:int, fillColor:uint, speed:Number, dir:String = "CLOCKWISE"):void {			_speed = speed;			_direction = dir;			var _radians = (360/_numCircles)*Math.PI/180;			setupSnake(_radius, _radians, _circleSize, fillColor);		};				private function setupSnake(_radius:int, _radians:Number, _circleSize:int, fillColor:uint):void {			var tmp:Sprite;			for (var i:int=0; i < _numCircles; i++) {				if (_setUp) {					tmp = new Sprite();					holder.addChild(tmp);					_sprites.push(tmp);				}				else tmp = _sprites[i];				tmp.x = _circleSize + _radius + Math.sin(_radians*i)*_radius;				tmp.y = _circleSize + _radius + Math.cos(_radians*i)*_radius;								drawCircle(tmp, _circleSize, fillColor);				_direction == "CLOCKWISE" ? tmp.alpha =  1 - (i * (1/_numCircles)) : tmp.alpha =  i * (1/_numCircles);			};			tmp = null;			_setUp = false;			bitmapSnapshot();		};			private function drawCircle(target:Sprite, innerRadius:int, fillColor:uint):void {			var tg:Graphics = target.graphics;			tg.clear();			tg.beginFill(fillColor, 1);			tg.drawCircle(0, 0, innerRadius);			tg.endFill();		};				private function updateSnake(e:Event):void {			_direction == "CLOCKWISE" ? _mainHolder.rotation += _speed : _mainHolder.rotation -= _speed;					};				private function bitmapSnapshot():void {			if (_mainHolder.numChildren > 0) _mainHolder.removeChildAt(0);			_bmd = new BitmapData(holder.width, holder.height, true, 0);			_bmd.draw(holder);			_bmp = new Bitmap(_bmd, "never", true);			_mainHolder.addChild(_bmp);			_bmp.x -= _bmp.width * .5;			_bmp.y -= _bmp.height * .5;			_mainHolder.x = _bmp.width * .5;			_mainHolder.y = _bmp.height * .5;		};	};};